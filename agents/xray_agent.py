"""
Expert Medical Imaging Analysis Agent using Gemini Vision API
Specializes in analyzing X-ray images through pure visual pattern recognition
"""
import google.generativeai as genai
from typing import Optional, Dict, List
import streamlit as st
from config import config
from prompts.prompt_templates import PromptTemplates

class XRayAgent:
    """Expert agent for analyzing X-ray images using advanced visual pattern recognition"""
    
    def __init__(self):
        """Initialize the expert X-ray analysis agent with Gemini configuration"""
        try:
            genai.configure(api_key=config.GOOGLE_AI_API_KEY)
            # Using Gemini 2.5 Flash for efficient multimodal analysis
            self.model = genai.GenerativeModel(config.MODEL_NAME)
            self.analysis_prompt = """
            You are an expert medical imaging analyst. Analyze this X-ray image based purely on visual patterns and features, 
            without relying on any text or annotations in the image. Focus on identifying:

            1. Anatomical Region and Positioning
            - Identify the anatomical region being imaged
            - Assess positioning and technical quality
            - Note any anatomical variants

            2. Visual Findings (use precise clinical terminology)
            - Bone structure and density patterns
            - Soft tissue abnormalities
            - Presence of any foreign objects
            - Alignment and symmetry
            - Signs of:
              * Fractures or bone abnormalities
              * Infections or inflammatory changes
              * Space-occupying lesions
              * Degenerative changes
              * Congenital anomalies

            3. Clinical Impression
            - Primary diagnostic findings
            - Differential diagnoses based on visual patterns
            - Severity assessment
            - Confidence level in findings (1-10)

            4. Recommended Next Steps
            - Additional imaging views if needed
            - Specialist referrals
            - Immediate interventions if required

            Format your response in clear bullet points using standard clinical terminology.
            Focus only on what you can definitively observe in the image patterns.
            If you cannot make a definitive assessment of any aspect, explicitly state this.
            """
        except Exception as e:
            st.error(f"Failed to initialize Expert X-ray Analysis Agent: {e}")
            self.model = None

    def analyze_xray(self, image_bytes: bytes) -> Optional[Dict]:
        """
        Perform expert analysis of X-ray image based on visual patterns
        
        Args:
            image_bytes: Raw image data as bytes
            
        Returns:
            Dictionary containing structured expert analysis or None if failed
        """
        if not self.model:
            return None
            
        try:
            # Prepare image for analysis
            image_part = {
                "mime_type": "image/jpeg",
                "data": image_bytes
            }
            
            # Generate expert analysis
            response = self.model.generate_content([self.analysis_prompt, image_part])
            
            if not response or not response.text:
                st.error("No analysis generated by the model")
                return None
            
            # Structure the expert analysis
            analysis_results = self._structure_expert_analysis(response.text)
            
            return analysis_results
                
        except Exception as e:
            st.error(f"Error during expert X-ray analysis: {e}")
            return None
            
    def _structure_expert_analysis(self, text: str) -> Dict:
        """
        Structure the expert analysis into organized clinical sections
        
        Args:
            text: Raw analysis text from the model
            
        Returns:
            Dictionary with structured clinical analysis
        """
        analysis = {
            'anatomical_region': {
                'region': None,
                'positioning': None,
                'technical_quality': None,
                'variants': []
            },
            'visual_findings': {
                'bone_structure': [],
                'soft_tissue': [],
                'foreign_objects': [],
                'alignment': None,
                'pathological_signs': []
            },
            'clinical_impression': {
                'primary_findings': [],
                'differential_diagnoses': [],
                'severity': None,
                'confidence': None
            },
            'recommendations': []
        }
        
        try:
            current_section = None
            current_subsection = None
            
            for line in text.split('\n'):
                line = line.strip()
                if not line:
                    continue
                
                # Identify sections
                lower_line = line.lower()
                if 'anatomical region' in lower_line:
                    current_section = 'anatomical_region'
                    continue
                elif 'visual findings' in lower_line:
                    current_section = 'visual_findings'
                    continue
                elif 'clinical impression' in lower_line:
                    current_section = 'clinical_impression'
                    continue
                elif 'recommended' in lower_line or 'next steps' in lower_line:
                    current_section = 'recommendations'
                    continue
                
                # Process content based on section
                if current_section and line.startswith(('-', '*', '•')):
                    clean_line = line.lstrip('-*• ').strip()
                    
                    if current_section == 'anatomical_region':
                        if 'position' in lower_line:
                            analysis['anatomical_region']['positioning'] = clean_line
                        elif 'quality' in lower_line:
                            analysis['anatomical_region']['technical_quality'] = clean_line
                        elif 'variant' in lower_line:
                            analysis['anatomical_region']['variants'].append(clean_line)
                        else:
                            analysis['anatomical_region']['region'] = clean_line
                            
                    elif current_section == 'visual_findings':
                        if 'bone' in lower_line or 'skeletal' in lower_line:
                            analysis['visual_findings']['bone_structure'].append(clean_line)
                        elif 'tissue' in lower_line:
                            analysis['visual_findings']['soft_tissue'].append(clean_line)
                        elif 'foreign' in lower_line or 'object' in lower_line:
                            analysis['visual_findings']['foreign_objects'].append(clean_line)
                        elif 'align' in lower_line or 'symmetry' in lower_line:
                            analysis['visual_findings']['alignment'] = clean_line
                        else:
                            analysis['visual_findings']['pathological_signs'].append(clean_line)
                            
                    elif current_section == 'clinical_impression':
                        if 'differential' in lower_line:
                            analysis['clinical_impression']['differential_diagnoses'].append(clean_line)
                        elif 'severity' in lower_line:
                            analysis['clinical_impression']['severity'] = clean_line
                        elif 'confidence' in lower_line:
                            try:
                                confidence = int(''.join(filter(str.isdigit, clean_line)))
                                analysis['clinical_impression']['confidence'] = min(confidence, 10)
                            except ValueError:
                                pass
                        else:
                            analysis['clinical_impression']['primary_findings'].append(clean_line)
                            
                    elif current_section == 'recommendations':
                        analysis['recommendations'].append(clean_line)
            
            # Clean up empty lists and None values
            for section in analysis:
                if isinstance(analysis[section], dict):
                    for key, value in analysis[section].items():
                        if isinstance(value, list) and not value:
                            analysis[section][key] = ['No specific findings']
                        elif value is None:
                            analysis[section][key] = 'Not specified'
                elif isinstance(analysis[section], list) and not analysis[section]:
                    analysis[section] = ['No specific recommendations']
            
            return analysis
            
        except Exception as e:
            st.error(f"Error structuring expert analysis: {e}")
            return {
                'anatomical_region': {'region': 'Error processing region details'},
                'visual_findings': {'pathological_signs': ['Error processing visual findings']},
                'clinical_impression': {
                    'primary_findings': ['Unable to process clinical impression'],
                    'confidence': None
                },
                'recommendations': ['Please consult with a radiologist for proper assessment']
            } 